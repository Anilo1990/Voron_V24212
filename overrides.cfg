############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 

# ------------------------------------------------------------------------------------------

#-------------------------#
#   PRINTER SETTINGS      #
#-------------------------#

[idle_timeout]
timeout: 7200
gcode:
    RESPOND MSG="Idle timeout reached"

#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

[gcode_macro _USER_VARIABLES]
variable_probe_type_enabled: "vorontap"
variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "clean", "bedmesh", "extruder_heating", "primeline"
gcode: # do not remove this line

#-------------------------#
#   Probe Offsets         #
#-------------------------#
# Command: PROBE_CALIBRATE

[probe]
z_offset: -1.550

#-------------------------#
#   Input Shaper          #
#-------------------------#

[input_shaper]
shaper_freq_x = 89.0
shaper_type_x = 3hump_ei
shaper_freq_y = 42.2
shaper_type_y = mzv

#-------------------------#
#   QGL                   #
#-------------------------#

[quad_gantry_level]
horizontal_move_z: 10
speed: 100

#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

[extruder]
control: pid
pid_kp: 25.799
pid_ki: 1.578
pid_kd: 105.453

[heater_bed]
control: pid
pid_kp: 57.415
pid_ki: 2.835
pid_kd: 290.666

#-------------------------#
#   Fans                  #
#-------------------------#

[fan_generic TOOLHEAD_FAN]
pin: toolhead:MCU_FAN2
max_power: 1.0
kick_start_time: 0.5
shutdown_speed: 0.0
off_below: 0.1

[fan_generic BED_FAN1]
pin: MCU_FAN0 # FAN BOTTOM LEFT
max_power: 0.5
kick_start_time: 0.5
shutdown_speed: 0.0
off_below: 0.1

[fan_generic BED_FAN2]
pin: MCU_FAN1 # FAN BOTTOM RIGHT
max_power: 0.5
kick_start_time: 0.5
shutdown_speed: 0.0
off_below: 0.1

[fan_generic BED_FAN3]
pin: MCU_FAN3 # FAN TOP RIGHT
max_power: 0.5
kick_start_time: 0.5
shutdown_speed: 0.0
off_below: 0.1

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

[stepper_z1]
dir_pin: !Z1_DIR

#-------------------------#
#   CASE LIGHTS           #
#-------------------------#

[output_pin CASE_LIGHTS]
pin: CASE_LIGHTS
#value: 75
#pwm: true
#cycle_time: 0.010

#-------------------------#
#   Toolhead LEDs         #
#-------------------------#

[gcode_macro _USER_VARIABLES]
variable_status_leds_enabled: True
variable_status_leds_effects_enabled: True
variable_status_leds_logo_idx: '1'
variable_status_leds_nozzle_idx: '2,3'
gcode:

[neopixel status_leds]
pin: toolhead:STATUS_NEOPIXEL

#-------------------------#
#   Additional Macros     #
#-------------------------#

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.6   		# Fan speed once bed temp is reached  
variable_slow: 0.2		    # Fan speed while bed is heating
gcode:

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=TOOLHEAD_FAN SPEED={SLOW}
    SET_FAN_SPEED FAN=BED_FAN1 SPEED={SLOW}
    SET_FAN_SPEED FAN=BED_FAN2 SPEED={SLOW}
    SET_FAN_SPEED FAN=BED_FAN3 SPEED={SLOW}   

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=TOOLHEAD_FAN SPEED={FAST}
    SET_FAN_SPEED FAN=BED_FAN1 SPEED={FAST}
    SET_FAN_SPEED FAN=BED_FAN2 SPEED={FAST}
    SET_FAN_SPEED FAN=BED_FAN3 SPEED={FAST}     

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=TOOLHEAD_FAN SPEED={0}
    SET_FAN_SPEED FAN=BED_FAN1 SPEED={0}
    SET_FAN_SPEED FAN=BED_FAN2 SPEED={0}
    SET_FAN_SPEED FAN=BED_FAN3 SPEED={0}     

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}


[gcode_shell_command backup_cfg]
command: ~/printer_data/config/autocommit.sh
timeout: 30
verbose: True

[gcode_macro BACKUP_CFG]
description: Backs up config directory GitHub
gcode:
	RUN_SHELL_COMMAND CMD=backup_cfg